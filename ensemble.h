

#ifndef ENSEMBLE_H_
#define ENSEMBLE_H_

#include "chain.h"
#include "pcd_tau.h"
#include "ensemble_call_block.h"

using namespace std;

	//public variables
	extern sstrentp chains;// arrays with vector part of chain conformations(Q,N,tauCD) 
	//contains conformations for all the chains. It is 1D array. use chain_index to access chain i
	extern chain_head* chain_heads;//array with scalar part chain conformations header
	extern int N_cha;// number of chains
	extern int NK;//number of kuhn step/ clusters in each chain
	extern int z_max;// max number of strand in chain (currently same as NK)
	extern float gamma_dot;// shear flow rate//TODO generalize
	extern bool dbug;//debug flag
	extern float kxx,kxy,kxz,kyx,kyy,kyz,kzx,kzy,kzz;

	//public functions
	void init_chains(int seed);

	//TODO this description should be in private part
	//on device there are two arrays with vector part of chain conformations
	// and only one array with scalar part chain conformation
	// every time the vector part is copied from one array to another
	// coping is done in entanglement parallel portion of the code
	// this allows to use textures/surfaces, which speeds up memory access
	// scalar part(chain headers) are update in the chain parallel portion of the code
	// chain headers are occupied much smaller memory, no specific memory access technic are used for them.
	// depending one odd or even number of time step were performed,
	//one of the get_chains_from_device_# should be used
	void get_chains_from_device();//Copies chains back to host memory
	void save_to_file(char *filename);
	void load_from_file(char *filename);
	void gpu_init(int seed);
	void host_chains_init();
	void gpu_time_step(float reach_time);
	void gpu_clean();//outputs chain conformations and then frees memory
	void mopup();//free memory//TODO make private

	// random numbers are generated by separate kernel and stored in the arrays
	// this reduces local varibles space. Also textures used to speed up memory access
	// once in a time these arrays need to refilled
	void random_textures_refill(int n_cha);//TODO make them private
	void random_textures_fill(int n_cha);
	  
	//stress calcualation
	stress_plus calc_stress();
#endif /* ENSEMBLE_H_ */
